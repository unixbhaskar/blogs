#+BLOG: Unixbhaskar's Blog
#+POSTID: 1699
#+title: Linux Automated Software Install On Freshly Installed System
#+date: 2024-02-10
#+tags: Technical Bash Scripting Tools Opensource Automation Gentoo Debian Slackware Arch

Well,from time to time I was forced to write something for my needs and exclusively
for my need. In this post, I am going to show you how trivialities reached their
peak by using simple things.

The goal of this problem-solving stuff was to install /specific set of software/
for my productivity. And it spun out of the need to hop on to different Linux
distribution like everyone else. Plus the big fillip might be got a new machine
to move on.

Hence, these trivialities. A simple /bash/ script to pull down stuff from the
internet and install it in the place where it should belong in the
system. Period.

Here is the script in its entirety :)

#+BEGIN_SRC bash
#!/usr/bin/env bash
#===============================================================================
#
#          FILE: software_install.sh
#
#         USAGE: ./software_install_.sh
#
#   DESCRIPTION: This script will fetch and build software on freshly install
#                system
#
#       OPTIONS: ---
#  REQUIREMENTS: This script should be run after installing the minimal base system
#          BUGS: ---
#         NOTES: Set up for minimal productivity environment
#        AUTHOR: Bhaskar Chowdhury (https://about.me/unixbhaskar), unixbhaskar@gmail.com
#  ORGANIZATION: Independent
#       CREATED: 02/08/2021 20:31
#      REVISION:  I
#       UPDATED: 02/09/2024 20:27
#===============================================================================

# License (GPL v2.0)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#set -o nounset                              # Treat unset variables as an error

pkgs="i3 i3block i3lock vim scrot zathura screen git newsboat
calcurse htop lsof feh  mutt postfix lynx w3m pass gpg2 curl wget
syslog-ng iptraf-ng moreutils findutils dhcp dhcpcd wpa_supplicant sudo
mpv ffmpeg isync cmus cronie imgmagick zip xz psutils xclip xsel xdotool
clipmenu clipmenud tcpdump ipcalc sysstats etckeeper aspell emacs"


if [[ $UID != 0 ]];then
    echo "You have to be superuser to run this script."
    exit 1
fi

cat << "EOF"
             a8888b.
             d888888b.
             8P"YP"Y88
             8|o||o|88
             8'    .88
             8`._.' Y8.
            d/      `8b.
          .dP   .     Y8b.
         d8:'   "   `::88b.
        d8"           `Y88b
       :8P     '       :888
        8a.    :      _a88P
      ._/"Yaa_ :    .| 88P|
 jgs  \    YP"      `| 8P  `.
 a:f  /     \._____.d|    .'
      `--..__)888888P`._.'
EOF


echo -e  '\t\t\t\t'  *------------------------------------------------------*
echo -e  '\t\t\t\t'   Debugging is twice as hard as writing the code in
echo -e  '\t\t\t\t'   the first place. Therefore, if you write the code
echo -e '\t\t\t\t'    as cleverly as possible, you are, by definition, not
echo -e '\t\t\t\t'    smart enough to debug it.
echo
echo -e '\t\t\t\t'     - Brian.W.Kernighan
echo -e '\t\t\t\t'  *------------------------------------------------------*


echo
echo ================Today:$(date)=======================================
echo

printf "\n\n\t Install minimal environment on G=Gentoo D=Debian S=Slackware A=Arch.... \n\n"

software_install() {
	printf "Which distro [G/D/S/A] : %s"
	read -r distro
	if [[ $distro == "G" ]];then
		install_on_gento
		dotfiles
		fetch_st
		fetch_dmenu
		fetch_vimb
	elif [[ $distro  == "D" ]];then
	        install_on_debian
	        dotfiles
		fetch_st
		fetch_dmenu
		fetch_vimb
	elif [[ $distro == "S" ]];then
		install_on_slackware
	        dotfiles
		fetch_st
		fetch_dmenu
		fetch_vimb
	elif [[ $distro == "A" ]];then
		install_on_arch
	        dotfiles
		fetch_st
		fetch_dmenu
		fetch_vimb
	else
		echo Nothing Chosen..aborting!
		exit 1
	fi
}

# Dotfiles
dotfiles() {

printf "Getting the dotfiles for important apps....\n"

git clone --recurse-submodules --remote-submodules git@github.com:unixbhaskar/dotfiles.git
cp dotfiles/.* $HOME/
}

# Fetch st from my github repo

fetch_st() {
  git clone git@github.com:unixbhaskar/st_terminal_build
  cp st_terminal_build/st_sol $HOME/bin/
  cp st_terminal_build/st_gruvbox $HOME/bin/
}

# Fetch vimb from github

fetch_vimb() {
  git clone git@github.com:unixbhaskar/vimb_build
  cp vimb_build/vimb $HOME/bin/
}

# Fetch dmenu from github

fetch_dmenu() {
  git clone git@github.com:unixbhaskar/dmenu_build
  cp dmenu_build/dmenu $HOME/bin/
  cp dmenu_build/dmenu_run $HOME/bin/
  cp dmenu_build/dmenu_path $HOME/bin/
}

install_on_gentoo() {

if [[ $(command -v emerge) != "" ]];then
	emerge -vt ${pkgs}
else
	echo This is not a Gentoo system
	exit 1
fi
}

install_on_debian() {
if [[ $(command -v apt-get) != "" ]];then
      apt-get install ${pkgs} --yes
else
	echo This is not a Debian system
	exit 1
fi
}

install_on_slackware() {
if [[ $(command -v slackpkg) != "" ]];then
	slackpkg install ${pkgs} --yes
else
	echo This is not a Slackware system
	exit 1
fi
}


install_on_arch() {
if [[ $(command -v pacman) != "" ]];then
	pacman -S ${pkgs} --noconfirm
else
	echo This is not a Arch linux system
	exit 1
fi
}


software_install

#+END_SRC

Things could have been done with more complexity in an /eye-catching/ way, but I refrained
.And this damn thing has not yet failed me!

Pretty ordinary stuff, right? :)

Here is a interaction with this damn script for your visual pleasure :

[[~/Pictures/Screenshots/2024-02-10-051001_1920x1200_scrot.png]]

I stopped at this prompt because I don't want to hosed my system, although the
stuffs are pretty updated all the time.

# /home/bhaskar/Pictures/Screenshots/2024-02-10-051001_1920x1200_scrot.png http://unixbhaskar.files.wordpress.com/2024/02/2024-02-10-051001_1920x1200_scrot.png
