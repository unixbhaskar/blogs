#+BLOG: Unixbhaskar's Blog
#+POSTID: 1904
#+title: Arch Linux Kernel Package Build From Upstream Kernel Source
#+date: 2024-09-17
#+tags: Technical Arch Linux Tools Opensource Package

Alright, Linux distributions have had their build mechanism upstreamed for some
time now, namely, /Debian/ and /Fedora/ and other formats too. To join that
bandwagon /Arch Linux/ takes a step and provides their way of building kernel
package via upstream kernel source.

Arch Linux used to have different processes of doing stuff and yours truly had to
maintain some hand-written ugly script to do the things. That basically involved
a lot of /sed/ manipulation to the *PKGBUILD* file to infuse my stuff.

Now, some kernel developers take that burden and make things available in the
Linux kernel source tree as others come before it.A simple /make target/ does the
job for you now. Plain and simple.

Steps to produce *Arch Linux Kernel Package via upstream kernel source* as follows:

One, get into the kernel source tree.

Second, make your own config or copy from the running system to the .config file
in the source tree.

Third, run =make pacman-pkg= and voila! Once that build complete you will be
having the package right in that directory.

How cool!

Well, the stupid urge to not do things all the steps by hand is one of a few
people's inclinations, and I am one of those. Good or bad , that is a separate
discussion.But I went ahead and wrote a few a lines as /wrapper/ over the actual
steps and make things,to get the damn job done in a whisker.

Here is the entire script at your disposal for use/liking/disliking ...

#+BEGIN_SRC bash
#!/usr/bin/env bash
get_make=$(command -v make)
get_elapsed_time="/usr/bin/time -f"
untar_it="tar -xJvf"
get_it=$(command -v secure_kernel_tarball)
NOTIFY=$(command -v notify-send)
NOCOLOR="\033[0m"
DT=$(date '+%d%m%Y')
build_dir="/home/bhaskar/mainline_kernel_$(hostname)_$DT"

if test ! -d "$build_dir";then
	mkdir -p "$build_dir"
fi

cd "$build_dir" || exit 1


archlinux_kernel_build() {

which_kernel

printf "\n\n"


eval ${get_it} ${kernel}


#Untar it
$untar_it linux-$kernel.tar.xz


#Get into the kernel direcory
cd linux-$kernel


#Clean the dir
$get_make clean && $get_make mrproper

#Copying existing/running kernel config
zcat /proc/config.gz >.config

#Disable this option to shorten the compile time
scripts/config --disable DEBUG_KERNEL
grep DEBUG_KERNEL .config

#Disable this option to shorten the compile time
scripts/config --disable DEBUG_INFO
grep DEBUG_INFO .config


#Make sure the flags symbols are set correctly with an updated value
#$get_make  ARCH=x86_64 olddefconfig
yes '' | make localmodconfig


# Now build it
$get_elapsed_time "\n\n\tTime Elapsed: %E\n\n" $get_make ARCH=x86_64 V=1 -j$(getconf _NPROCESSORS_ONLN) pacman-pkg

$NOTIFY --urgency=critical "Kernel building done"

printf "Install the generated headers,kernel and doc packages with pacman .. \n\n\n"


sudo pacman -U  --noconfirm $(hostname)-$kernel-$kernel-1-x86_64.pkg.tar.zst

sudo pacman -U --noconfirm $(hostname)-$kernel-headers-$kernel-1-x86_64.pkg.tar.zst


$NOTIFY "Kernel update process done"

}

which_kernel() {
printf "\n\n Which kernel would be your base? Stable or Mainline or Longterm? [S/M/L]: %s"
read response

if [[ $response == "S" ]];then
#Get the stable kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'stable:' | grep -oP '(?<=strong>).*(?=</strong.*)' | grep 6.10)
elif [[ $response == "M" ]];then
#Get the mainline kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'mainline:' | grep -oP '(?<=strong>).*(?=</strong.*)')
elif [[ $response == "L" ]];then
#Get the longterm kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'longterm:' | grep -oP '(?<=strong>).*(?=</strong.*)')
fi
}

archlinux_kernel_build

#+END_SRC

See! How abject ordinary it is. I bet people out there could do much better,
honestly. However, this is the best I could produce and it did the damn job for
me, flawlessly.
