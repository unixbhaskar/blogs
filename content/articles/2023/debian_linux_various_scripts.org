#+BLOG: Unixbhaskar's Blog
#+POSTID: 1637
#+title: Debian Linux Various Scripts
#+date: 2023-10-21
#+tags: Technical Debian Linux opensource Bash Scripting Tools OperatingSystem

Alright, *Debian Linux[fn:1]* is one of the *stable and primitive* parts of my Linux
journey.But having said that, it is a distribution with the /least surprises/ and the most
stable. Siting on it might not /enthrall/ you like sitting on other
distribution.This distribution is so fine-grained and tested before releasing to
public that hardly a few needed further. Although, you can turn it into a more
bleeding edge by opting for the /Unstable/ branch of it(in their lingo),but still rock
solid.

Here in this post, I shall be showing you some absolutely ordinary stuff I made
for my convenience.

So, without further ado, jump in . :)

* Debian Update System

#+BEGIN_SRC bash
#!/usr/bin/env bash
# This is small script to do system wide update/upgrade.
RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"
source /home/bhaskar/colors.sh

printf "Hostname: %s\nDate    : %s\nUptime  :%s\n\n"  "$(hostname -s)" "$(date)" "$(uptime)"

printf "\n\n\n ${Bright}${Yellow}Checking the root space ...${NOCOLOR} \n\n\n"

maxpoint="95"
per=`df / | awk 'END{print $5}' | tr -d %`
if  [ "$per" -le  "$maxpoint" ]; then

printf "${GREEN}Ok...looks good...procced ${NOCOLOR} \n\n"

elif [ "$per" -gt "$maxpoint" ]; then

printf "${RED}Not enough space...aborting!${NOCOLOR}"
exit 1
fi

printf "${Bright}${Blue}Updating and Upgrading the system... ${NOCOLOR} \n\n"

time apt-get update && apt-get -V upgrade -y

#time apt-get update && apt-get -V upgrade --with-new-pkgs upgrade
exit 0

#+END_SRC

As you can see in the script, nothing overly complicated stuff, which needs some
explaining.

* Debian Reverse Dependency For Packages

#+BEGIN_SRC bash
#!/usr/bin/env bash

pkg=$1

apt-cache rdepends $pkg
#+END_SRC

Oh, dear! It is astonishingly easy.

* Debian Old Kernel and Header Remove

#+BEGIN_SRC bash
#!/usr/bin/env bash

dpkg --list | grep linux-image

printf "Put the kernel image : %s"
read kernel_image

apt-get --purge remove $kernel_image

printf "\n Remove headers too...\n"

dpkg --list | grep linux-headers


printf "Put the kernel header image : %s"
read header_image
apt-get --purge remove $header_image

#+END_SRC

The commands used in the above scripts are all /built-in/ command to this
distributions. In fact, all related to the package management commands.

* Debian Kernel Build From Upstream Source

#+BEGIN_SRC bash
#!/usr/bin/env bash
# This script will build debian kernel package from the upstream stable kernel

get_elapsed_time="/usr/bin/time -f"
build_dir=/home/bhaskar/git-linux/debian_kernel_build
existing_config_file="/boot/config-$(uname -r)"


debian_kernel_build() {

# Check if build dir exists, if not then pull and build

if [ ! -d "$build_dir" ];then
	echo Gosh! It will take hell lot of time to clone the repo ...take a break ...
	echo
	$get_elapsed_time "\n\n\tTime Elapsed: %E\n\n" git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git $HOME/git-linux/debian_kernel_build

 else
	 echo Dir exists!! Getting into the git repo ...

         cd $build_dir || exit 1
fi

echo Cleaning previous stale stuff and pull new stuffs in

 git reset --hard

 git clean -dfx

 git pull

# echo Getting the build dependencies for kernel build :
# echo

# apt install devscripts
# /usr/bin/mk-build-deps

#Clean the dir
make clean && make mrproper

#Copying existing/running kernel config
cp $existing_config_file .config
ls -al .config

#Disable this option to shorten the compile time
scripts/config --disable DEBUG_KERNEL
grep DEBUG_KERNEL .config

#Disable this option to shorten the compile time
scripts/config --disable DEBUG_INFO
grep DEBUG_INFO .config

#This is needed ,otherwise it won't allow you to build
scripts/config --disable system_trusted_keys
grep CONFIG_SYSTEM_TRUSTED_KEYS .config

#Make sure the flags symbols are set correctly with an updated value
make  ARCH=x86_64 olddefconfig

# Now build it
$get_elapsed_time "\n\n\tTime Elapsed: %E\n\n" make ARCH=x86_64 V=1 -j$(getconf _NPROCESSORS_ONLN) deb-pkg


 printf "\n\n\n ${Bright}${Green}Install the generated packages aka kernel,headers,modules et al ${NOCOLOR}\n\n\n"

 cd ..

 dpkg -i *.deb

if [ $? -eq 0 ];then

     find /boot -maxdepth 1 -name "vmlinuz-*" -type f -ls

      notify-send "Kernel update process done"
else
	notify-send "Nope, the package install have trouble."
fi


}
debian_kernel_build

#+END_SRC

This is what I do with my system,when updating the kernel. You could be doing something else and probably
better.

* Debian Wiki Search

#+BEGIN_SRC bash
#!/usr/bin/env bash
# set -vx
if [[ -z "$1" ]]; then
  #printf "Search query: ";
  query=$( echo | dmenu -p "Debian Linux Wiki Search:" )
else
	query="$1"
fi

query="${query// /_}"
#echo "$query"

if [[ "$query" == "" ]];then
	exit 1
else

setsid -f $(command -v vimb) https://wiki.debian.org/$query

fi

#+END_SRC

* Footnotes

[fn:1] [[https://www.debian.org/][Debian Linux Operating System]]
