#+BLOG: Unixbhaskar's Blog
#+POSTID: 1232
#+title: Git Aliases Can Help You To Work Faster On Git Repositories
#+date: 2023-03-10
#+tags: Technical Git

Well, the short turbulence in life seems to get over for the time being. So, I can
jot down a few things which I do use day to day basis. In this blog , I am gonna
write about the importance of */Git Aliases/*.

Like other aliases(i.e shell) it has boon and bane. You are supposed to know when
to use it and when you should not. Generally, people make alias out of complex
command chains, which basically difficult to remember to perform a certain
task. While having the benefit of using shorthand notation in the form of
aliases we might forget the actual command running underneath. If and only if,
that operation can be done infrequently way. Otherwise, it should not be a problem
to take advantage of it.


I am wildly hoping that you did not bothered to look into my dot gitconfig tile,
which is hosted on [[https://github.com/unixbhaskar/dotfiles/blob/f5f3e7b745a970409b51894175d5d4fcd1028633/.gitconfig][GITHUB]] .

Alright, if you are reluctant to click on that link to take you to the
repositories page where the file is hosted, then you can have it right here for
your viewing pleasure.


#+BEGIN_SRC bash
[user]
	email = "Your mail address"
	name = "Your Real Name"
	signingkey = "your GPG key here"
[push]
	default = matching
[commit]
[gpg]
	program = gpg2
[commit]
	gpgsign = true
[core]
	editor = vim
        abbrev = 12
	commitGraph = true
[color]
	ui = true

[pretty]
	fixes = Fixes: %h (\"%s\")
[log]
	showSignature = true
[alias]
	unwantedcommit = "!f() { echo "Need to pass the exact commit hash or HEAD~num_of_commit ${1}";}; f"

	logline = log  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

        gitlog = log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        st = status -sb  # You have to run this command inside your git repo dir i.e git st
	notifyheader = "--add-header="X-Patchwork-Bot: notify"" #add email notify header to get reply from lkml when patch applied
	tags = tag -l    #You have to run this command inside your git repo dir i.e git tags
	sane = "!git reset --hard origin/master" # Discard the local commits and sync with remote master
	curtag = "!git describe --abbrev=0"  # You have to run this command inside the git repo i.e git curtag
	ci = "!git commit -s -m"  # You have to run this command inside the git repo dir i.e git ci "write the msg"
	tagsfromallbranches = "!git describe --tags $(git rev-list --tags --max-count=1)" # same as above i.e git tagsfromallbranches
	branches = branch -av  # You need to run this inside your git repo dir i.e git branches
	repoclean = "!git clean -d -f -x"  # You need to run this inside your git repo dir i.e git repoclean
	remotes = remote -v   # You need to run this command inside the git repo dir i.e git remotes
	delfiles = "!git ls-files --deleted | xargs git rm"  # You need to run this command inside the git repo dir i.e git delfiles
        sdiff = "!git diff && git submodule foreach 'git diff'"	 # You need to run this command inside the git repo dir i.e git sdiff
	spush = "!git push --recurse-submodules=on-demand"   # You need to run this command inside your git repo dir i.e git spush
	supdate = "!git submodule update --remote --merge"  #You need to run this command inside your git repo dir i.e git supdate
	localcommit = "!git cherry -v"
	updatelinux = "!git push git@github.comr:unixbhaskar/linux.git master"
        gitlablinux = "!git push git@gitlab.com:unixbhaskar/linux.git master"
	updategit = "!git push git@github.com:unixbhaskar/git.git master"
	muttupdate = "!git push git@gitlab.com:unixbhaskar/mutt.git master"
        updatei3 = "!git push git@github.com;unixbhaskar/i3.git next"
        updatebcc = "!git push git@github.com:unixbhaskar/bcc.git master"
	pushlatestlinuxtag = "!git push git@github.com:unixbhaskar/linux.git --tags"
        pushlatestgittag = "!git push git@github.com:unixbhaskar/git.git --tags"
	logref = "!git reflog --date=iso"  # You need to run this command inside of your git repo i.e git logref
        githubmyi3wm = "!git push git@github.com:unixbhaskar/i3WM.git main"
        gitlabmyi3wm = "!git push git@gitlab.com:unixbhaskar/i3WM.git main"
	squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} \"$@\");};f"
# Show the diff between the latest commit and the current state ; run it
# inside your git repo dir
        currentstate = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
#show aliases
      aliases = config --get-regexp alias #You need to run this command inside your git repo dir
#interactive rebase
     reb = "!r() { git rebase -i HEAD~$1; }; r" #You need to run this command inside your git repo dir
# List contributors with number of commits
     contributors = shortlog --summary --numbered #You need to run this command inside your git repo dir
# remove bunch of files at once
     remove = rm $(git ls-files -d)          #You need to run this command inside your git repo dir
#Gobal pull request fetcher
#git config --global --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"

#Ignore files track
      gitignore = state --ignored --untracked-files=all  #You need to run this command inside your git repo dir
#hide,unhide and hidden
#
    hide   = update-index --skip-worktree  #You need to run this command inside your git repo dir
    unhide = update-index --no-skip-worktree  #You need to run this command inside your git repo dir
    hidden  = "!git ls-files -v | grep ^[hsS] | cut -c 3-" #You need to run this command inside your git repo dir
#Freeze and unfreeze files
#
freeze = update-index --assume-unchanged  #You need to run this command inside your git repo dir
unfreeze = update-index --no-assume-unchanged  #You need to run this command inside your git repo dir
	type = cat-file -t  #You need to run this command inside your git repo dir
	dump = cat-file -p  #You need to run this command inside your git repo dir
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short  #You need to run this command inside your git repo dir

[sendemail]
; setup for using git send-email; prompts for password
         smtpuser = "your email here"
         smtpserver = smtp.yourmailprovider.com
         smtpencryption = tls
         smtpserverport = 587
	 smtppass = "your smtp password"
	 confirm = auto
	 chainreplyto = false


[github]
	user = unixbhaskar
	token = "Your GitHub token here"
[rerere]
	enabled = true
[gc]
	writeCommitGraph = true
[merge]
	tool = vimdiff
[diff]
	external = git_diff_wrapper  # call it inside the git repo; git diff
[pull]
	rebase = false
[init]
	defaultBranch = master
#[credential]
#	helper = store  #try to avoid this, because if you enable it ,this
#	process will record/write your password in project's .git/index file cleartext.

#+END_SRC

If and only if, you go through it, some of them might come in handy to your git
operations. I have added them whenever I needed them and made use of them to bring
value to my operation. Adding for the sake of adding aliases doesn't make much
sense nor it is useful.

Also, you might add some of the very frequent operations you do day to day
basis. Let's be honest, I do not use a few of the aliases I have created and I
haven't got the time to get rid of those. In the near future, I might do so.
