#+BLOG: Unixbhaskar's Blog
#+POSTID: 1011
#+title: Slackware Custom Kernel Creation
#+date: 2022-05-16
#+tags: Technical

Well, in this post I am gonna touch a subject ,which I love to play with and
that is /kernel build/ in different way and on different Linux distributions. In
this case, I am sitting on /Slackware/ and gonna show you , how you can build your
own kernel on it.

I am going to give you some explanation of the script , which I have written for
that purpose. So, it will be easier for you people to understand.

Here we go, section by section of the script , so it will be easier for you to
grasp.

#+begin_src bash
#!/usr/bin/env bash

# Author: Bhaskar Chowdhury <unixbhaskar@gmail.com>
# LICENSE: GPL-2
# Check out: https://www.kernel.org/doc/html/latest/kbuild/index.html
# For kernel download helper script: https://git.kernel.org/pub/scm/linux/kernel/git/mricon/korg-helpers.git/tree/get-verified-tarball

get_make=$(command -v make)
get_elapsed_time="/usr/bin/time -f"
untar_it="tar -xJvf"
existing_config_file="/boot/config-$(uname -r)"
build_dir=$HOME/latest_kernel_build
get_it=$(command -v secure_kernel_tarball)
EFIMENUENTRY="/boot/efi/loader/entries"
EFIBOOTDIR="/boot/efi/EFI"
NOTIFY=$(command -v notify-send)
LOCAL_BIN="/usr/local/bin"
dracut=$(command -v dracut)
clang="CC=clang"
make_llvm="LLVM=1"
llvm_assm="LLVM_IAS=1"
#+end_src

Alright, in this section as you can see, that I have declared bunch of
variables. Which are going to be used in the script. I made the varibles names
are explicit as possible ,so it is easy for everyone to understand and
assignment to the variable are explicit too.

The next section of the script is real fancy or eye candy stuff and nothing more
than that.

#+begin_src bash
clear
cat << "EOF"
  _  __                    _
 | |/ /___ _ __ _ __   ___| |
 | ' // _ \ '__| '_ \ / _ \ |
 | . \  __/ |  | | | |  __/ |
 |_|\_\___|_|  |_| |_|\___|_|_ _       _   _
  / ___|___  _ __ ___  _ __ (_) | __ _| |_(_) ___  _ __
 | |   / _ \| '_ ` _ \| '_ \| | |/ _` | __| |/ _ \| '_ \
 | |__| (_) | | | | | | |_) | | | (_| | |_| | (_) | | | |
  \____\___/|_| |_| |_| .__/|_|_|\__,_|\__|_|\___/|_| |_|
                      |_|
EOF

#+end_src

So, Lets get into the more involved section, to start with, we need to check
about the build directory where we are going to build the kernel initially. We
make check here to see, if the directory is not existed then go ahead and
created.

#+begin_src bash
if [[ ! -d $build_dir ]];then
	mkdir -p $build_dir
fi

cd $build_dir
#+end_src

Simple right! It should be, that is the whole purpose of this post.

Okay, next we move to create some functions for some specific work. Let us
start with the big and the main one.

#+begin_src bash
slackware_kernel_build() {

#Download the kernel

which_kernel

eval ${get_it} ${kernel}

#Untar it
$untar_it linux-$kernel.tar.xz

#Get into the kernel direcory
cd linux-$kernel

#Check for required tools to build kernel
scripts/ver_linux

#Copying the existing system running kernel config
cp $existing_config_file .config

# Take away the DEBUG options for faster compile
scripts/config --disable DEBUG_KERNEL
grep DEBUG_KERNEL .config

#Similar vein like above, for faster compile time
scripts/config --disable DEBUG_INFO
grep DEBUG_INFO .config

#Make old kernel config set as well
$get_make olddefconfig


printf "Then make it ...\n\n"

which_compiler

#$get_elapsed_time "\t\n\n Elapsed time: %E\n\n" $get_make V=1 ARCH=x86_64 -j$(getconf _NPROCESSORS_ONLN) LOCALVERSION=-$(hostname)


$NOTIFY --urgency=critical 'Kernel compilation done'

if [[ $? == 0 ]];then

printf "Done\n\n"

else

printf "Error encountered\n\n"

fi


$NOTIFY --urgency=critical 'Modules install done'

# Call up the function to do the actual job

slackware_kernel_build

printf "\n\n Copying the build kernel to boot directory\n\n"

cp arch/x86/boot/bzImage /boot/vmlinuz-$kernel-$(hostname)
$NOTIFY --urgency=critical 'Kernel install to local boot dir'


printf " Cross check the item ...\n\n"

ls -al /boot/vmlinuz-*

printf "\n\n Copy the System.map file to /boot dir\n\n"

cp System.map /boot/System.map-$kernel-$(hostname)

printf "Copying the .config file to /boot dir \n\n"

cp .config /boot/config-$kernel-$(hostname)

printf "Make sure we are in right directory  ..\n\n"
cd /boot
pwd

printf "Lets relink System.map,config,huge,generic and normal against the new kernel!... \n\n"
unlink System.map
ln -s Systeme.map-$kernel-$(hostname)  System.map

unlink config
ln -s config-$kernel-$(hostname) config

unlink vmlinuz
ln -s vmlinuz-$kernel-$(hostname) vmlinuz

unlink vmlinuz-huge
ln -s vmlinuz-$kernel-$(hostname) vmlinuz-huge

unlink vmlinuz-generic
ln -s vmlinuz-$kernel-$(hostname) vmlinuz-generic

find . -maxdepth 1 -type l -ls

printf "Done and looks good! \n\n"

printf "Copying the image to EFI directory ....\n\n"

cp -v /boot/vmlinuz-$kernel-$(hostname) $EFIBOOTDIR/slackware/

ls -al /boot/efi/EFI/slackware/*

$NOTIFY --urgency=critical 'Copied kernel to UEFI boot dir'

printf "\n\n  Fixing the menu entry of the loader....\n\n\n"

>$EFIMENUENTRY/Slackware.conf

echo "title Slackware" > $EFIMENUENTRY/Slackware.conf
echo "linux /EFI/slackware/vmlinuz-$kernel-$(hostname)" >> $EFIMENUENTRY/Slackware.conf
echo "options root=PARTUUID=d3fe6218-506b-4ed1-ac14-97adb053baff rw" >> $EFIMENUENTRY/Slackware.conf


printf "Let see the entry to confirmation...\n\n\n"

cat $EFIMENUENTRY/Slackware.conf

$NOTIFY --urgency=critical 'Modified boot entry with latest kernel'

printf "\n\n  Fix the UEFI boot shell script... ..\n\n\n"

echo "\EFI\slackware\vmlinuz-$kernel-$(hostname) root=PARTUUID=d3fe6218-506b-4ed1-ac14-97adb053baff rw" > /boot/efi/EFI/slackware.nsh

cat $EFIBOOTDIR/slackware.nsh


printf " Cleaning up the build directory .....\n\n"

rm -rf $build_dir


$NOTIFY --urgency=critical 'Kernel Update finished'


}
#+end_src

It is big in size, but very explicit and easy to understand kinda function. The
purpose of this function to integrate others functions (which will be in below
sections) and produce the kernel and make all dance related to their places and
fix the boot entry and update /UEFI/ script, so that it can be run from that
prompt.

I have left some hard-coded stuff in the function just for the sake of
clarity. If you feel, you can improve that without deviate from the script's
purpose, then please do so and importantly let me know. So, I can learn
something and probably adopt it.


Here is another function, that's main purpose to enlist different kernels
available to general public from /kernel.org/. And you are suppose to chose one
for the build.

#+begin_src bash
which_kernel() {
printf "\n\n Which kernel would be your base? Stable or Mainline or Longterm? [S/M/L]: %s"
read response

if [[ $response == "S" ]];then
#Get the stable kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'stable:' | grep -oP '(?<=strong>).*(?=</strong.*)' | grep 5.17)
elif [[ $response == "M" ]];then
#Get the mainline kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'mainline:' | grep -oP '(?<=strong>).*(?=</strong.*)')
elif [[ $response == "L" ]];then
#Get the longterm kernel from kernel.org
kernel=$(curl -s https://www.kernel.org/ | grep -A1 'longterm:' | grep -oP '(?<=strong>).*(?=</strong.*)')
fi
}
#+end_src

Next, we declare another function to select the compiler to build the kernel. We
are giving choice between /GCC/ or /CLANG/, but you must choose one to proceed.

#+begin_src bash
#This is assuming that you have already installed "clang" and "llvm" in the system

which_compiler() {
printf "\n\t Which compiler do you want to use for build ,CLANG or GCC? [C/G] : %s"
read compiler_chosen

if [[ $compiler_chosen == "G" ]];then

       gcc_compile

elif [[ $compiler_chosen == "C" ]];then

       clang_llvm_compile
else
                printf "\n\n You have to choose a compiler to build.\n"
	        exit 1

fi
}

     gcc_compile() {

                printf "\n You have chosen to use GCC as the compiler to build.\n\n"

		$get_make  ARCH=x86_64 olddefconfig

		$get_elapsed_time "\t\n\n Elapsed Time : %E \n\n"  $get_make ARCH=x86_64 V=1 -j$(getconf _NPROCESSORS_ONLN) LOCALVERSION=-$(hostname)

		$get_make cleandocs

		$get_make modules_install

}

clang_llvm_compile() {
		printf "\n\t You have chosen to use CLANG as the compiler to build.\n\n"

		$get_make $clang $host_clang_cc $llvm_make $llvm_assm  ARCH=x86_64 olddefconfig

	        $get_elapsed_time "\n\t Elapsed Time: %E \n\n" $get_make $clang $host_clang_cc $llvm_make $llvm_assm  ARCH=x86_64 V=1 -j$(getconf _NPROCESSORS_ONLN)

		$get_make cleandocs

		$get_make $clang $llvm_make $llvm_assm modules_install

}
#+end_src

I have made the functions clear and explicit. So, it can be easily adopted. If
you find a way to better that, please do so and kindly let me know too, so I can
follow that.

You can watch my video on this at [[https://youtu.be/R3O8ewAXBHA][Youtube]] .
